apiVersion: {{ include "n8n.deployment.apiVersion" . }}
kind: Deployment
metadata:
  name: {{ include "n8n.fullname" . }}
  labels:
    {{- include "n8n.labels" . | nindent 4 }}
spec:
  replicas: {{ .Values.replicaCount }}
  selector:
    matchLabels:
      {{- include "n8n.selectorLabels" . | nindent 6 }}
  template:
    {{- /* Defini√ß√£o de vari√°veis com defaults no escopo do template.template */}}
    {{- $config := .Values.config | default dict -}}
    {{- $configMapValues := .Values.configMap | default dict -}}
    {{- $configMapEnabled := $configMapValues.enabled | default false -}}
    {{- $persistenceValues := .Values.persistence | default dict -}}
    {{- $serviceValues := .Values.service | default dict -}}
    {{- $imageValues := .Values.image | default dict -}}
    {{- $imageRepo := $imageValues.repository | default "n8nio/n8n" -}}
    {{- $imageTag := $imageValues.tag | default .Chart.AppVersion -}}
    {{- $imagePullPolicy := $imageValues.pullPolicy | default "IfNotPresent" -}}
    {{- $podSecurityContextValues := .Values.podSecurityContext | default dict -}} {{/* Adicionado para chown */}}

    metadata:
      labels:
        {{- include "n8n.selectorLabels" . | nindent 8 }}
        {{- with .Values.podLabels }}
        {{- toYaml . | nindent 8 }}
        {{- end }}
      annotations:
        checksum/secret-encryption-key: {{ include (print $.Template.BasePath "/secret-encryption-key.yaml") . | sha256sum }}
        {{- if $configMapEnabled }}
        checksum/configmap-settings: {{ include (print $.Template.BasePath "/configmap-settings.yaml") . | sha256sum }}
        {{- end }}
        {{- with .Values.podAnnotations }}
        {{- toYaml . | nindent 8 }}
        {{- end }}
    spec:
      {{- with .Values.imagePullSecrets }}
      imagePullSecrets:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      serviceAccountName: {{ include "n8n.serviceAccountName" . }}
      {{- if .Values.podSecurityContext }} {{/* Mant√©m a verifica√ß√£o original, pois toYaml em nil √© problem√°tico */}}
      securityContext: {{- .Values.podSecurityContext | toYaml | nindent 8 }}
      {{- end }}
      initContainers:
        {{- $initContainers := .Values.initContainers | default dict -}}
        {{- $fixPermissions := $initContainers.fixPermissions | default dict -}}
        {{- $fixPermissionsEnabled := $fixPermissions.enabled | default false -}}
        {{- $fixPermImage := $fixPermissions.image | default dict -}}
        {{- $waitForDependency := $initContainers.waitForDependency | default dict -}}
        {{- $installNodes := $initContainers.installNodes | default dict -}}

        {{- if $fixPermissionsEnabled }}
        - name: fix-permissions
          image: "{{ $fixPermImage.repository | default "busybox" }}:{{ $fixPermImage.tag | default "1.36.1" }}"
          imagePullPolicy: {{ $fixPermImage.pullPolicy | default "IfNotPresent" }}
          command:
            - "sh"
            - "-c"
            - >
              TARGET_DIR="{{ $persistenceValues.mountPath | default "/home/node/.n8n" }}";
              mkdir -p ${TARGET_DIR} &&
              chown -R {{ $podSecurityContextValues.runAsUser | default 1000 }}:{{ $podSecurityContextValues.fsGroup | default 1000 }} ${TARGET_DIR} &&
              echo "Permissions fixed for ${TARGET_DIR}"
          volumeMounts:
            - name: n8n-data
              mountPath: {{ $persistenceValues.mountPath | default "/home/node/.n8n" }}
          resources:
            {{- toYaml ($fixPermissions.resources | default dict) | nindent 12 }}
        {{- end }}

        {{- /* Exemplo de wait-for-postgres (adapte se for usar) */}}
        {{- /*
        {{- $waitDepImage := $waitForDependency.image | default dict -}}
        {{- if .Values.externalPostgresql.host }}
        - name: wait-for-postgres
          image: "{{ $waitDepImage.repository | default "busybox" }}:{{ $waitDepImage.tag | default "1.36.1" }}"
          imagePullPolicy: {{ $waitDepImage.pullPolicy | default "IfNotPresent" }}
          env:
            - name: PG_HOST
              value: {{ .Values.externalPostgresql.host }}
            - name: PG_PORT
              value: {{ .Values.externalPostgresql.port | default "5432" | quote }}
          command: ["sh", "-c", "echo 'Waiting for PostgreSQL...'; until nc -zv -w 3 ${PG_HOST} ${PG_PORT}; do sleep 3; done; echo 'PostgreSQL is up!'"]
          resources:
            {{- toYaml ($waitForDependency.resources | default dict) | nindent 12 }}
        {{- end }}
        */}}

        {{- if $config.extraNodePackages }}
        - name: install-nodes
          image: "{{ $imageRepo }}:{{ $imageTag }}" # Usa a imagem principal do n8n
          imagePullPolicy: {{ $imagePullPolicy }}
          workingDir: {{ $persistenceValues.mountPath | default "/home/node/.n8n" }}
          command:
            - sh
            - -c
            - |
              echo "üì¶ Installing extra NPM packages..."
              mkdir -p "{{ $persistenceValues.mountPath | default "/home/node/.n8n" }}/node_modules"
              npm install --prefix "{{ $persistenceValues.mountPath | default "/home/node/.n8n" }}" {{ range $config.extraNodePackages }}{{ .name }}{{ range .installArgs }} {{ . }}{{ end }} {{ end }} && echo "‚úÖ Extra NPM packages installed."
          volumeMounts:
            - name: n8n-data
              mountPath: {{ $persistenceValues.mountPath | default "/home/node/.n8n" }}
          resources:
            {{- toYaml ($installNodes.resources | default dict) | nindent 12 }}
        {{- end }}

      containers:
        - name: {{ .Chart.Name }}
          {{- if .Values.securityContext }} {{/* Para o securityContext do container, n√£o do pod */}}
          securityContext: {{- .Values.securityContext | toYaml | nindent 12 }}
          {{- end }}
          image: "{{ $imageRepo }}:{{ $imageTag }}"
          imagePullPolicy: {{ $imagePullPolicy }}
          command:
            - "n8n"
          args:
            - "start"
            {{- with $config.extraArgs }}
            {{- toYaml . | nindent 12 }}
            {{- end }}
          ports:
            - name: http
              containerPort: {{ $serviceValues.port | default 5678 }}
              protocol: TCP
          env:
            - name: EXECUTIONS_MODE
              value: {{ $config.executionsMode | default "regular" }}
            {{- if eq ($config.executionsMode | default "regular") "queue" }}
            - name: EXECUTIONS_PROCESS
              value: {{ $config.executionsProcess | default "main" }}
            {{- end }}

            {{- $externalRedis := .Values.externalRedis | default dict -}}
            {{- if and $externalRedis.host (eq ($config.executionsMode | default "regular") "queue") }}
            - name: QUEUE_BULL_REDIS_HOST
              value: {{ include "n8n.redis.host" . }} {{/* Usando helper */}}
            - name: QUEUE_BULL_REDIS_PORT
              value: {{ $externalRedis.port | default "6379" | quote }}
            {{- if $externalRedis.existingSecret }}
            - name: QUEUE_BULL_REDIS_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: {{ $externalRedis.existingSecret }}
                  key: {{ $externalRedis.passwordSecretKey | default "redis-password" }}
            {{- else if $externalRedis.password }}
            - name: QUEUE_BULL_REDIS_PASSWORD
              value: {{ $externalRedis.password }}
            {{- end }}
            {{- end }}

            {{- $externalPostgresql := .Values.externalPostgresql | default dict -}}
            {{- if $externalPostgresql.host }} {{/* Ou uma condi√ß√£o mais robusta como 'if .Values.externalPostgresql.enabled' */}}
            - name: DB_TYPE
              value: "postgresdb"
            - name: DB_POSTGRESDB_HOST
              value: {{ include "n8n.postgresql.host" . }} {{/* Usando helper */}}
            - name: DB_POSTGRESDB_PORT
              value: {{ $externalPostgresql.port | default "5432" | quote }}
            - name: DB_POSTGRESDB_DATABASE
              value: {{ $externalPostgresql.database }}
            - name: DB_POSTGRESDB_USER
              value: {{ $externalPostgresql.username }}
            {{- if $externalPostgresql.existingSecret }}
            - name: DB_POSTGRESDB_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: {{ $externalPostgresql.existingSecret }}
                  key: {{ $externalPostgresql.passwordSecretKey | default "postgresql-password" }}
            {{- else if $externalPostgresql.password }} {{/* Cuidado ao colocar senhas diretamente aqui */}}
             - name: DB_POSTGRESDB_PASSWORD
              value: {{ $externalPostgresql.password }}
            {{- end }}
            {{- end }}

            - name: N8N_ENCRYPTION_KEY
              valueFrom:
                secretKeyRef:
                  name: {{ include "n8n.encryptionKeySecretName" . }}
                  key: {{ $config.encryptionKeySecretKey | default "n8n-encryption-key" }}
            - name: N8N_PORT
              value: {{ $serviceValues.port | default 5678 | quote }}
            - name: N8N_HOST
              value: "0.0.0.0"
            - name: WEBHOOK_URL
              value: {{ $config.webhookUrl }}
            - name: GENERIC_TIMEZONE
              value: {{ $config.timezone | default "America/Sao_Paulo" }}
            - name: NODE_ENV
              value: {{ $config.nodeEnv | default "production" }}
            - name: N8N_SKIP_WEBHOOK_DEREGISTRATION_SHUTDOWN # Para n8n >= 1.26
              value: "true"
            - name: N8N_EMAIL_MODE # Para n8n >= 1.23
              value: "smtp" # Ajuste conforme necess√°rio (ex: "sendmail")

            {{- with $config.extraEnvVars }}
            {{- range . }}
            - name: {{ .name }}
            {{- if .value }}
              value: {{ .value | quote }}
            {{- else if .valueFrom }}
              valueFrom: {{- .valueFrom | toYaml | nindent 16 | trim }}
            {{- end }}
            {{- end }}
            {{- end }}

          {{- $livenessProbeValues := .Values.livenessProbe | default dict -}}
          {{- if $livenessProbeValues.httpGet }} {{/* Ou uma chave 'enabled' mais expl√≠cita */}}
          livenessProbe:
            httpGet:
              path: {{ $livenessProbeValues.httpGet.path | default "/healthz" }}
              port: {{ $livenessProbeValues.httpGet.port | default "http" }}
            initialDelaySeconds: {{ $livenessProbeValues.initialDelaySeconds | default 60 }}
            periodSeconds: {{ $livenessProbeValues.periodSeconds | default 30 }}
            timeoutSeconds: {{ $livenessProbeValues.timeoutSeconds | default 5 }}
            failureThreshold: {{ $livenessProbeValues.failureThreshold | default 3 }}
            successThreshold: {{ $livenessProbeValues.successThreshold | default 1 }}
          {{- end }}

          {{- $readinessProbeValues := .Values.readinessProbe | default dict -}}
          {{- if $readinessProbeValues.httpGet }}
          readinessProbe:
            httpGet:
              path: {{ $readinessProbeValues.httpGet.path | default "/healthz" }}
              port: {{ $readinessProbeValues.httpGet.port | default "http" }}
            initialDelaySeconds: {{ $readinessProbeValues.initialDelaySeconds | default 30 }}
            periodSeconds: {{ $readinessProbeValues.periodSeconds | default 10 }}
            timeoutSeconds: {{ $readinessProbeValues.timeoutSeconds | default 5 }}
            failureThreshold: {{ $readinessProbeValues.failureThreshold | default 3 }}
            successThreshold: {{ $readinessProbeValues.successThreshold | default 1 }}
          {{- end }}
          resources:
            {{- toYaml (.Values.resources | default dict) | nindent 12 }}
          volumeMounts:
            - name: n8n-data
              mountPath: {{ $persistenceValues.mountPath | default "/home/node/.n8n" }}
              {{- if $persistenceValues.subPath }}
              subPath: {{ $persistenceValues.subPath }}
              {{- end }}
            {{- if $configMapEnabled }}
            - name: n8n-settings
              mountPath: "{{ $persistenceValues.mountPath | default "/home/node/.n8n" }}/config" # Monta o diret√≥rio config
              readOnly: true
            {{- end }}
            {{- with .Values.extraVolumeMounts }}
            {{- toYaml . | nindent 12 }}
            {{- end }}
      volumes:
        - name: n8n-data
        {{- if $persistenceValues.enabled }}
          persistentVolumeClaim:
            claimName: {{ $persistenceValues.existingClaim | default (printf "%s-pvc" (include "n8n.fullname" .)) }}
        {{- else }}
          emptyDir: {}
        {{- end }}
        {{- if $configMapEnabled }}
        - name: n8n-settings
          configMap:
            name: {{ $configMapValues.name | default (printf "%s-settings" (include "n8n.fullname" .)) }}
            defaultMode: {{ $configMapValues.defaultMode | default 420 }}
            # Se voc√™ quiser montar apenas o settings.json e n√£o o diret√≥rio config inteiro:
            # items:
            #   - key: settings.json # Chave no ConfigMap
            #     path: settings.json # Nome do arquivo no mountPath (resultaria em /config/settings.json)
        {{- end }}
        {{- with .Values.extraVolumes }}
        {{- toYaml . | nindent 8 }}
        {{- end }}
      {{- with .Values.nodeSelector }}
      nodeSelector:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.affinity }}
      affinity:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.tolerations }}
      tolerations:
        {{- toYaml . | nindent 8 }}
      {{- end }}