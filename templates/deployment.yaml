apiVersion: {{ include "n8n.deployment.apiVersion" . }}
kind: Deployment
metadata:
  name: {{ include "n8n.fullname" . }}
  labels:
    {{- include "n8n.labels" . | nindent 4 }}
spec:
  replicas: {{ .Values.replicaCount }}
  selector:
    matchLabels:
      {{- include "n8n.selectorLabels" . | nindent 6 }}
  template:
    metadata:
      labels:
        {{- include "n8n.selectorLabels" . | nindent 8 }}
        {{- with .Values.podLabels }}
        {{- toYaml . | nindent 8 }}
        {{- end }}
      annotations:
        checksum/config: {{ include (print $.Template.BasePath "/secret-encryption-key.yaml") . | sha256sum }}
        {{- if .Values.configMap.enabled }}
        checksum/configmap: {{ include (print $.Template.BasePath "/configmap-settings.yaml") . | sha256sum }} # Supondo que voc√™ tenha configmap-settings.yaml
        {{- end }}
        {{- with .Values.podAnnotations }}
        {{- toYaml . | nindent 8 }}
        {{- end }}
    spec:
      {{- with .Values.imagePullSecrets }}
      imagePullSecrets:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      serviceAccountName: {{ include "n8n.serviceAccountName" . }} # Certifique-se de que _helpers.tpl define isso ou remova se n√£o usar SA espec√≠fico
      {{- if .Values.podSecurityContext.enabled }}
      securityContext: {{- omit .Values.podSecurityContext "enabled" | toYaml | nindent 8 }}
      {{- end }}
      initContainers:
        {{- if .Values.initContainers.fixPermissions.enabled }}
        - name: fix-permissions
          image: "{{ .Values.initContainers.fixPermissions.image.repository }}:{{ .Values.initContainers.fixPermissions.image.tag }}"
          imagePullPolicy: {{ .Values.initContainers.fixPermissions.image.pullPolicy }}
          command:
            - "sh"
            - "-c"
            - >
              TARGET_DIR="{{ .Values.persistence.mountPath }}";
              mkdir -p ${TARGET_DIR} &&
              chown -R {{ .Values.podSecurityContext.runAsUser | default 1000 }}:{{ .Values.podSecurityContext.fsGroup | default 1000 }} ${TARGET_DIR} &&
              echo "Permissions fixed for ${TARGET_DIR}"
          volumeMounts:
            - name: n8n-data
              mountPath: {{ .Values.persistence.mountPath }}
          resources:
            {{- toYaml .Values.initContainers.fixPermissions.resources | nindent 12 }}
        {{- end }}

        {{- if .Values.global.redis.enabled }} # Assumindo que .Values.global.redis.enabled controla se Redis √© usado
        - name: wait-for-redis
          image: "{{ .Values.initContainers.waitForDependency.image.repository }}:{{ .Values.initContainers.waitForDependency.image.tag }}"
          imagePullPolicy: {{ .Values.initContainers.waitForDependency.image.pullPolicy }}
          env:
            - name: REDIS_HOST
              value: {{ include "n8n.redis.host" . }}
            - name: REDIS_PORT
              value: {{ .Values.global.redis.master.service.port | default "6379" | quote }} # Obtendo do values global do redis
          command:
            - "sh"
            - "-c"
            - >
              echo "‚è≥ Aguardando Redis ${REDIS_HOST}:${REDIS_PORT}...";
              until nc -zv -w 3 ${REDIS_HOST} ${REDIS_PORT}; do echo "Redis n√£o dispon√≠vel (${REDIS_HOST}:${REDIS_PORT}), aguardando..."; sleep 3; done;
              echo "‚úÖ Redis est√° pronto (${REDIS_HOST}:${REDIS_PORT})!"
          resources:
            {{- toYaml .Values.initContainers.waitForDependency.resources | nindent 12 }}
        {{- end }}

        {{- if .Values.global.postgresql.enabled }} # Assumindo que .Values.global.postgresql.enabled controla se Postgres √© usado
        - name: wait-for-postgres
          image: "{{ .Values.initContainers.waitForDependency.image.repository }}:{{ .Values.initContainers.waitForDependency.image.tag }}"
          imagePullPolicy: {{ .Values.initContainers.waitForDependency.image.pullPolicy }}
          env:
            - name: PG_HOST
              value: {{ include "n8n.postgresql.host" . }}
            - name: PG_PORT
              value: {{ .Values.global.postgresql.primary.service.ports.postgresql | default "5432" | quote }} # Obtendo do values global do postgresql
          command:
            - "sh"
            - "-c"
            - >
              echo "‚è≥ Aguardando PostgreSQL ${PG_HOST}:${PG_PORT}...";
              until nc -zv -w 3 ${PG_HOST} ${PG_PORT}; do echo "PostgreSQL n√£o dispon√≠vel (${PG_HOST}:${PG_PORT}), aguardando..."; sleep 3; done;
              echo "‚úÖ PostgreSQL est√° pronto (${PG_HOST}:${PG_PORT})!"
          resources:
            {{- toYaml .Values.initContainers.waitForDependency.resources | nindent 12 }}
        {{- end }}

        {{- if .Values.config.extraNodePackages }}
        - name: install-nodes
          image: "{{ .Values.image.repository }}:{{ .Values.image.tag | default .Chart.AppVersion }}"
          imagePullPolicy: {{ .Values.image.pullPolicy }}
          workingDir: {{ .Values.persistence.mountPath }}
          command:
            - sh
            - -c
            - |
              echo "üì¶ Instalando pacotes NPM extras..."
              mkdir -p "{{ .Values.persistence.mountPath }}/node_modules"
              npm install --prefix "{{ .Values.persistence.mountPath }}" {{ range .Values.config.extraNodePackages }}{{ .name }}{{ range .installArgs }} {{ . }}{{ end }} {{ end }} && echo "‚úÖ Pacotes NPM extras instalados."
          volumeMounts:
            - name: n8n-data
              mountPath: {{ .Values.persistence.mountPath }}
          resources:
            {{- toYaml .Values.initContainers.installNodes.resources | nindent 12 }}
        {{- end }}

      containers:
        - name: {{ .Chart.Name }}
          {{- if .Values.containerSecurityContext.enabled }}
          securityContext: {{- omit .Values.containerSecurityContext "enabled" | toYaml | nindent 12 }}
          {{- end }}
          image: "{{ .Values.image.repository }}:{{ .Values.image.tag | default .Chart.AppVersion }}"
          imagePullPolicy: {{ .Values.image.pullPolicy }}
          command:
            - "n8n"
          args:
            - "start"
            {{- with .Values.config.extraArgs }}
            {{- toYaml . | nindent 12 }}
            {{- end }}
          ports:
            - name: http
              containerPort: {{ .Values.service.port }}
              protocol: TCP
          env:
            - name: EXECUTIONS_MODE
              value: {{ .Values.config.executionsMode | default "regular" }}
            {{- if eq .Values.config.executionsMode "queue" }}
            - name: EXECUTIONS_PROCESS
              value: {{ .Values.config.executionsProcess | default "main" }}
            {{- end }}

            {{- if and .Values.global.redis.enabled (eq .Values.config.executionsMode "queue") }}
            - name: QUEUE_BULL_REDIS_HOST
              value: {{ include "n8n.redis.host" . }}
            - name: QUEUE_BULL_REDIS_PORT
              value: {{ .Values.global.redis.master.service.port | default "6379" | quote }}
            {{- if .Values.global.redis.auth.enabled }}
            - name: QUEUE_BULL_REDIS_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: {{ .Values.global.redis.auth.existingSecret | default (printf "%s-redis" .Release.Name) }}
                  key: {{ .Values.global.redis.auth.existingSecretPasswordKey | default "redis-password" }}
            {{- end }}
            {{- end }}

            - name: DB_TYPE
              value: "postgresdb"
            - name: DB_POSTGRESDB_HOST
              value: {{ include "n8n.postgresql.host" . }}
            - name: DB_POSTGRESDB_PORT
              value: {{ .Values.global.postgresql.primary.service.ports.postgresql | default "5432" | quote }}
            - name: DB_POSTGRESDB_DATABASE
              value: {{ .Values.global.postgresql.auth.database }}
            - name: DB_POSTGRESDB_USER
              value: {{ .Values.global.postgresql.auth.username }}
            - name: DB_POSTGRESDB_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: {{ .Values.global.postgresql.auth.existingSecret | default (printf "%s-postgresql" .Release.Name ) }}
                  key: {{ .Values.global.postgresql.auth.secretKeys.userPasswordKey | default "postgresql-password" }}

            - name: N8N_ENCRYPTION_KEY
              valueFrom:
                secretKeyRef:
                  name: {{ include "n8n.encryptionKeySecretName" . }}
                  key: {{ .Values.config.encryptionKeySecretKey | default "n8n-encryption-key" }}
            - name: N8N_PORT
              value: {{ .Values.service.port | quote }}
            - name: N8N_HOST
              value: "0.0.0.0"
            - name: WEBHOOK_URL
              value: {{ .Values.config.webhookUrl }}
            - name: GENERIC_TIMEZONE
              value: {{ .Values.config.timezone | default "America/Sao_Paulo" }}
            - name: NODE_ENV
              value: {{ .Values.config.nodeEnv | default "production" }}
            - name: N8N_SKIP_WEBHOOK_DEREGISTRATION_SHUTDOWN
              value: "true"
            - name: N8N_EMAIL_MODE
              value: "smtp"

            {{- range .Values.config.extraEnvVars }}
            - name: {{ .name }}
              value: {{ .value | quote }}
            {{- end }}
          {{- if .Values.livenessProbe.enabled }}
          livenessProbe: {{- omit .Values.livenessProbe "enabled" | toYaml | nindent 12 }}
          {{- end }}
          {{- if .Values.readinessProbe.enabled }}
          readinessProbe: {{- omit .Values.readinessProbe "enabled" | toYaml | nindent 12 }}
          {{- end }}
          resources:
            {{- toYaml .Values.resources | nindent 12 }}
          volumeMounts:
            - name: n8n-data
              mountPath: {{ .Values.persistence.mountPath }}
            {{- if .Values.configMap.enabled }}
            - name: n8n-settings
              mountPath: "{{ .Values.persistence.mountPath }}/config" # Monta o diret√≥rio config
              readOnly: true
            {{- end }}
            {{- with .Values.extraVolumeMounts }}
            {{- toYaml . | nindent 12 }}
            {{- end }}
      volumes:
        - name: n8n-data
        {{- if .Values.persistence.enabled }}
          persistentVolumeClaim:
            claimName: {{ .Values.persistence.existingClaim | default (printf "%s-pvc" (include "n8n.fullname" .)) }}
        {{- else }}
          emptyDir: {}
        {{- end }}
        {{- if .Values.configMap.enabled }}
        - name: n8n-settings
          configMap:
            name: {{ .Values.configMap.name | default (printf "%s-settings" (include "n8n.fullname" .)) }}
            defaultMode: {{ .Values.configMap.defaultMode | default 420 }}
            # items: # Se voc√™ quiser montar arquivos espec√≠ficos do configmap
            #   - key: settings.json
            #     path: settings.json
        {{- end }}
        {{- with .Values.extraVolumes }}
        {{- toYaml . | nindent 8 }}
        {{- end }}
      {{- with .Values.nodeSelector }}
      nodeSelector:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.affinity }}
      affinity:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.tolerations }}
      tolerations:
        {{- toYaml . | nindent 8 }}
      {{- end }}