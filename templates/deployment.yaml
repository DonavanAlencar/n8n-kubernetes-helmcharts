  initContainers:
    # 1) Ajusta permiss√µes do diret√≥rio de dados do n8n no volume persistente.
    - name: fix-permissions
      image: {{ .Values.initContainers.fixPermissions.image.repository }}:{{ .Values.initContainers.fixPermissions.image.tag | default "1.36.0" }}
      imagePullPolicy: {{ .Values.initContainers.fixPermissions.image.pullPolicy | default "IfNotPresent" }}
      command:
        - "sh"
        - "-c"
        - >
          mkdir -p /home/node/.n8n &&
          chown -R {{ .Values.podSecurityContext.runAsUser | default 1000 }}:{{ .Values.podSecurityContext.fsGroup | default 1000 }} /home/node/.n8n
      volumeMounts:
        - name: n8n-data
          mountPath: /home/node/.n8n
      resources:
        {{- toYaml .Values.initContainers.fixPermissions.resources | nindent 12 }}

    # 2) Aguarda o Redis ficar pronto (se habilitado)
    {{- if .Values.redis.enabled }}
    - name: wait-for-redis
      image: {{ .Values.initContainers.waitForDependency.image.repository }}:{{ .Values.initContainers.waitForDependency.image.tag | default "1.36.0" }}
      imagePullPolicy: {{ .Values.initContainers.waitForDependency.image.pullPolicy | default "IfNotPresent" }}
      command:
        - "sh"
        - "-c"
        - >
          REDIS_HOST="{{ tpl .Values.redis.host . }}";
          REDIS_PORT="{{ .Values.redis.port }}";
          echo "‚è≥ Aguardando Redis ${REDIS_HOST}:${REDIS_PORT}...";
          until nc -zv ${REDIS_HOST} ${REDIS_PORT}; do echo "Redis n√£o dispon√≠vel (${REDIS_HOST}:${REDIS_PORT}), aguardando..."; sleep 3; done;
          echo "‚úÖ Redis est√° pronto (${REDIS_HOST}:${REDIS_PORT})!"
      resources:
        {{- toYaml .Values.initContainers.waitForDependency.resources | nindent 12 }}
    {{- end }}

    # 3) Aguarda o PostgreSQL ficar pronto
    - name: wait-for-postgres
      image: {{ .Values.initContainers.waitForDependency.image.repository }}:{{ .Values.initContainers.waitForDependency.image.tag | default "1.36.0" }}
      imagePullPolicy: {{ .Values.initContainers.waitForDependency.image.pullPolicy | default "IfNotPresent" }}
      command:
        - "sh"
        - "-c"
        - >
          PG_HOST="{{ printf "%s-postgresql" (include "n8n.fullname" .) }}";
          {{- if .Values.postgresql.service.ports.postgresql }}
          PG_PORT="{{ .Values.postgresql.service.ports.postgresql }}";
          {{- else }}
          PG_PORT="5432"; # Fallback se n√£o estiver definido no values do postgresql subchart
          {{- end }}
          echo "‚è≥ Aguardando PostgreSQL ${PG_HOST}:${PG_PORT}...";
          until nc -zv ${PG_HOST} ${PG_PORT}; do echo "PostgreSQL n√£o dispon√≠vel (${PG_HOST}:${PG_PORT}), aguardando..."; sleep 3; done;
          echo "‚úÖ PostgreSQL est√° pronto (${PG_HOST}:${PG_PORT})!"
      resources:
        {{- toYaml .Values.initContainers.waitForDependency.resources | nindent 12 }}

    # 4) Instala n√≥s NPM extras (se definidos em .Values.n8n.extraNodePackages)
    {{- if .Values.n8n.extraNodePackages }}
    - name: install-nodes
      image: "{{ .Values.image.repository }}:{{ .Values.image.tag | default .Chart.AppVersion }}"
      imagePullPolicy: {{ .Values.image.pullPolicy }}
      workingDir: /home/node/.n8n # IMPORTANTE: Executa npm no diret√≥rio de dados
      command:
        - sh
        - -c
        - |
          echo "üì¶ Instalando pacotes NPM extras..."
          mkdir -p /home/node/.n8n/node_modules # Garante que o diret√≥rio de destino para m√≥dulos exista
          npm install --prefix /home/node/.n8n {{ range .Values.n8n.extraNodePackages }}{{ .name }}{{ range .installArgs }} {{ . }}{{ end }} {{ end }} && echo "‚úÖ Pacotes NPM extras instalados."
      volumeMounts:
        - name: n8n-data
          mountPath: /home/node/.n8n
      resources:
        {{- toYaml .Values.initContainers.installNodes.resources | nindent 12 }}
    {{- end }}

  containers:
    - name: {{ .Chart.Name }}
      securityContext:
        {{- toYaml .Values.securityContext | nindent 12 }}
      image: "{{ .Values.image.repository }}:{{ .Values.image.tag | default .Chart.AppVersion }}"
      imagePullPolicy: {{ .Values.image.pullPolicy }}
      command:
        - "n8n"
      args:
        - "start"
        {{- with .Values.n8n.extraArgs }}
        {{- toYaml . | nindent 12 }}
        {{- end }}
      ports:
        - name: http
          containerPort: {{ .Values.service.port }}
          protocol: TCP
      env:
        # Configura√ß√µes para modo de execu√ß√£o
        - name: EXECUTIONS_MODE
          value: {{ .Values.n8n.executionsMode | default "regular" }} # "queue" se usando workers/scaling
        {{- if eq .Values.n8n.executionsMode "queue" }}
        - name: EXECUTIONS_PROCESS # 'main' para o pod principal, 'worker' para pods de worker
          value: {{ .Values.n8n.executionsProcess | default "main" }}
        {{- end }}

        # Configura√ß√µes do Redis (se habilitado e modo queue)
        {{- if and .Values.redis.enabled (eq .Values.n8n.executionsMode "queue") }}
        # Para n8n >= 1.0
        - name: QUEUE_BULL_REDIS_HOST
          value: {{ tpl .Values.redis.host . }}
        - name: QUEUE_BULL_REDIS_PORT
          value: {{ .Values.redis.port | quote }}
        {{- if .Values.redis.password }}
        - name: QUEUE_BULL_REDIS_PASSWORD
          valueFrom:
            secretKeyRef:
              name: {{ .Values.redis.existingSecret | default (printf "%s-redis" (include "common.names.fullname" .)) }}
              key: {{ .Values.redis.existingSecretPasswordKey | default "redis-password" }}
        {{- end }}
        {{- end }}

        # Configura√ß√µes do Banco de Dados PostgreSQL
        - name: DB_TYPE
          value: "postgresdb"
        - name: DB_POSTGRESDB_HOST
          value: {{ printf "%s-postgresql" (include "n8n.fullname" .) }}
        - name: DB_POSTGRESDB_PORT
        {{- if .Values.postgresql.service.ports.postgresql }}
          value: {{ .Values.postgresql.service.ports.postgresql | quote }}
        {{- else }}
          value: "5432" # Fallback
        {{- end }}
        - name: DB_POSTGRESDB_DATABASE
          value: {{ .Values.postgresql.auth.database }}
        - name: DB_POSTGRESDB_USER
          value: {{ .Values.postgresql.auth.username }}
        - name: DB_POSTGRESDB_PASSWORD
          valueFrom:
            secretKeyRef:
              name: {{ .Values.postgresql.auth.existingSecret | default (printf "%s-postgresql" (include "n8n.fullname" .)) }}
              key: {{ .Values.postgresql.auth.secretKeys.userPasswordKey | default "postgresql-password" }}

        # Configura√ß√µes Gerais do n8n
        - name: N8N_ENCRYPTION_KEY
          valueFrom:
            secretKeyRef:
              name: {{ .Values.n8n.existingEncryptionKeySecret | default (printf "%s-encryption-key" (include "n8n.fullname" .)) }}
              key: {{ .Values.n8n.encryptionKeySecretKey | default "n8n-encryption-key" }}
        - name: N8N_PORT
          value: {{ .Values.service.port | quote }}
        - name: N8N_HOST
          value: "0.0.0.0"
        - name: WEBHOOK_URL # URL p√∫blica do n8n
          value: {{ .Values.n8n.webhookUrl }}
        - name: GENERIC_TIMEZONE
          value: {{ .Values.n8n.timezone | default "America/Sao_Paulo" }}
        - name: NODE_ENV
          value: {{ .Values.n8n.nodeEnv | default "production" }}
        - name: N8N_SKIP_WEBHOOK_DEREGISTRATION_SHUTDOWN
          value: "true" # Para n8n >= 1.26
        - name: N8N_EMAIL_MODE
          value: "smtp" # Para n8n >= 1.23, ajuste se necess√°rio

        {{- with .Values.n8n.extraEnvVars }}
        {{- toYaml . | nindent 12 }}
        {{- end }}
      livenessProbe:
        httpGet:
          path: {{ .Values.livenessProbe.httpGet.path | default "/healthz" }}
          port: http
        initialDelaySeconds: {{ .Values.livenessProbe.initialDelaySeconds }}
        periodSeconds: {{ .Values.livenessProbe.periodSeconds }}
        timeoutSeconds: {{ .Values.livenessProbe.timeoutSeconds }}
        failureThreshold: {{ .Values.livenessProbe.failureThreshold }}
        successThreshold: {{ .Values.livenessProbe.successThreshold }}
      readinessProbe:
        httpGet:
          path: {{ .Values.readinessProbe.httpGet.path | default "/healthz" }}
          port: http
        initialDelaySeconds: {{ .Values.readinessProbe.initialDelaySeconds }}
        periodSeconds: {{ .Values.readinessProbe.periodSeconds }}
        timeoutSeconds: {{ .Values.readinessProbe.timeoutSeconds }}
        failureThreshold: {{ .Values.readinessProbe.failureThreshold }}
        successThreshold: {{ .Values.readinessProbe.successThreshold }}
      resources:
        {{- toYaml .Values.resources | nindent 12 }}
      volumeMounts:
        - name: n8n-data
          mountPath: {{ .Values.persistence.mountPath | default "/home/node/.n8n" }}
        {{- if .Values.n8n.configMap.enabled }}
        - name: n8n-settings
          mountPath: {{ .Values.persistence.mountPath | default "/home/node/.n8n" }}/config/settings.json
          subPath: settings.json
        {{- end }}
        {{- with .Values.extraVolumeMounts }}
        {{- toYaml . | nindent 12 }}
        {{- end }}
  volumes:
    - name: n8n-data
    {{- if .Values.persistence.enabled }}
      persistentVolumeClaim:
        claimName: {{ .Values.persistence.existingClaim | default (printf "%s-n8n-pvc" (include "n8n.fullname" .)) }}
    {{- else }}
      emptyDir: {}
    {{- end }}
    {{- if .Values.n8n.configMap.enabled }}
    - name: n8n-settings
      configMap:
        name: {{ .Values.n8n.configMap.name | default (printf "%s-settings" (include "n8n.fullname" .)) }}
        defaultMode: {{ .Values.n8n.configMap.defaultMode | default 420 }} # 0644 em decimal
        items:
          - key: settings.json
            path: settings.json
    {{- end }}
    {{- with .Values.extraVolumes }}
    {{- toYaml . | nindent 8 }}
    {{- end }}
  {{- with .Values.nodeSelector }}
  nodeSelector:
    {{- toYaml . | nindent 8 }}
  {{- end }}
  {{- with .Values.affinity }}
  affinity:
    {{- toYaml . | nindent 8 }}
  {{- end }}
  {{- with .Values.tolerations }}
  tolerations:
    {{- toYaml . | nindent 8 }}
  {{- end }}