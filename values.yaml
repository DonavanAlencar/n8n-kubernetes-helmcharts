# ==========================
# Bloco de Postgres
# ==========================
postgresql:
  enabled: true
  username: n8nuser
  password: "VhB1knK#2vgVkbnyyc%p%hB#aCx"
  database: n8ndb

  # Persistência do Postgres. storageClass="" utiliza o default do cluster.
  # Se você tiver um SC dinâmico como "longhorn", substitua "" por "longhorn".
  persistence:
    storageClass: ""
    size: "10Gi"

  config:
    postgres_conf: |
      max_connections = 1000
      shared_buffers = 512MB
      work_mem = 64MB
      maintenance_work_mem = 128MB
      wal_level = replica
      synchronous_commit = on
      checkpoint_timeout = 15min
      autovacuum = on
      log_autovacuum_min_duration = 0
    pg_hba_conf: |
      local   all             all                                     peer
      host    all             all             127.0.0.1/32            md5
      host    all             all             ::1/128                 md5
      host    all             all             0.0.0.0/0               md5

# ==========================
# Imagem do n8n e réplicas
# ==========================
image:
  repository: n8nio/n8n
  tag: latest
  pullPolicy: IfNotPresent

replicaCount: 1

# ==========================
# Service / LoadBalancer
# ==========================
service:
  type: LoadBalancer
  port: 5678

# ==========================
# Ingress (Traefik/TLS)
# ==========================
ingress:
  enabled: true
  annotations:
    kubernetes.io/ingress.class: traefik
    traefik.ingress.kubernetes.io/router.entrypoints: "web,websecure"
    traefik.ingress.kubernetes.io/router.tls: "true"
    traefik.ingress.kubernetes.io/router.tls.certresolver: le
  hosts:
    - host: n8n.546digitalservices.com
      paths:
        - path: /
          pathType: Prefix
  tls:
    - hosts:
        - n8n.546digitalservices.com
      secretName: n8n-tls

# ==========================
# Habilitar Autoscaling
# ==========================
scaling:
  enabled: true

# ==========================
# Redis (para EXECUTIONS_PROCESS=queue)
# ==========================
redis:
  enabled: true
  auth:
    enabled: true
    password: "1B6kPmysGGoNBKnvGuueJ3222u1zYBOK"
  architecture: standalone
  master:
    persistence:
      enabled: false
      storageClass: ""
      size: "16Gi"
  service:
    port: 6379
    type: ClusterIP
  metrics:
    enabled: false

# ==========================
# Configurações do n8n (encryptionKey)
# ==========================
config:
  encryptionKey: "1B6kPmysGGoNBKnvGuueJ3222u1zYBOK"

# ==========================
# Pacotes extras (n8n-nodes-langchain)
# ==========================
extraNodePackages:
  - name: "@n8n/n8n-nodes-langchain"
    installArgs:
      - "--no-save"

# ==========================
# Worker / Webhook
# ==========================
worker:
  enabled: true
webhook:
  enabled: false

# ==========================
# securityContext para UID/GID 1000
# (permite gravar em /home/node/.n8n)
# ==========================
securityContext:
  runAsUser: 1000
  fsGroup: 1000

# ==========================
# initContainers
# ==========================
initContainers:
  fixPermissions:
    enabled: true
    image: busybox:1.35.0
  waitForRedis:
    enabled: true
    image: busybox:1.35.0

# ==========================
# Variáveis do Redis
# ==========================
redisConfig:
  host: "{{ .Release.Name }}-redis-master"
  port: 6379

# ==========================
# Probes (readiness + liveness)
# ==========================
probe:
  readiness:
    path: /status/ready
    port: 5678
    initialDelaySeconds: 30
    periodSeconds: 10
    timeoutSeconds: 5
  liveness:
    path: /status/ready
    port: 5678
    initialDelaySeconds: 60
    periodSeconds: 30
    timeoutSeconds: 5

# ==========================
# Persistência do n8n (PVC para /home/node/.n8n)
# ==========================
persistence:
  # "" → utilizar StorageClass Default do cluster (ou deixe "longhorn" se existir)
  storageClass: ""
  size: "5Gi"